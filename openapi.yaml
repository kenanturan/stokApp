openapi: 3.0.0
info:
  title: Stock API
  version: 1.0.0
  description: Stok ve satış yönetimi API'si

servers:
  - url: http://localhost:8080
    description: Geliştirme sunucusu

paths:
  /api/v1/products:
    get:
      summary: Tüm ürünleri listele
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '500':
          description: Sunucu hatası
    post:
      summary: Yeni ürün ekle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Ürün başarıyla oluşturuldu
        '400':
          description: Geçersiz istek
        '500':
          description: Sunucu hatası

  /api/v1/products/{id}:
    delete:
      summary: Ürün sil
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ürün başarıyla silindi
        '404':
          description: Ürün bulunamadı
        '500':
          description: Sunucu hatası

  /api/v1/sales:
    get:
      summary: Tüm satışları listele
      responses:
        '200':
          description: Satışlar başarıyla listelendi
    post:
      summary: Yeni satış oluştur
      description: FIFO mantığına göre stok düşümü yaparak satış oluşturur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleInput'
      responses:
        '201':
          description: Satış başarıyla oluşturuldu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleResponse'
        '400':
          description: Geçersiz istek veya yetersiz stok
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Yetersiz stok"

  /api/v1/stock-movements:
    get:
      summary: Stok hareketlerini listele
      parameters:
        - name: productId
          in: query
          required: false
          schema:
            type: integer
          description: Belirli bir ürünün stok hareketlerini filtrelemek için
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        productId:
                          type: integer
                        product:
                          $ref: '#/components/schemas/Product'
                        initialQuantity:
                          type: number
                        remainingQuantity:
                          type: number
                        unitCost:
                          type: number
                        movementDate:
                          type: string
                          format: date-time
        '500':
          description: Sunucu hatası

  /api/v1/recipes:
    get:
      summary: Tüm reçeteleri listele
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
    
    post:
      summary: Yeni reçete oluştur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '201':
          description: Reçete başarıyla oluşturuldu

  /api/v1/recipes/{id}/produce:
    post:
      summary: Reçeteye göre üretim yap
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  description: Üretilecek miktar
                date:
                  type: string
                  format: date-time

  /api/v1/sales/recipe:
    post:
      summary: Reçete satışı oluştur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeSale'
      responses:
        '201':
          description: Reçete satışı başarıyla oluşturuldu
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sale'
        '400':
          description: Geçersiz istek veya yetersiz stok
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Yetersiz stok veya geçersiz reçete"

  /api/v1/recipes/{id}:
    get:
      summary: Reçete detaylarını getir
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
    delete:
      summary: Reçete sil
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reçete başarıyla silindi
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Reçete bulunamadı
        '500':
          description: Sunucu hatası

  /api/v1/products/average-price:
    get:
      summary: Ürünün ortalama ve FIFO maliyetini hesapla
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
          description: Ürün adı
        - name: quantity
          in: query
          required: false
          schema:
            type: number
          description: Hesaplanacak miktar (opsiyonel)
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      productName:
                        type: string
                      totalStock:
                        type: number
                      averagePrice:
                        type: number
                      nextFIFOCost:
                        type: number
                      fifoValue:
                        type: number
                      fifoCost:
                        type: number
        '400':
          description: Geçersiz istek
        '500':
          description: Sunucu hatası

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        companyName:
          type: string
        category:
          type: string
        productName:
          type: string
        unit:
          type: string
        invoiceNo:
          type: string
        invoiceDate:
          type: string
          format: date
        initialStock:
          type: number
          minimum: 0
        currentStock:
          type: number
          minimum: 0
        unitPrice:
          type: number
          minimum: 0
        vat:
          type: number
          minimum: 0
        totalCost:
          type: number
          minimum: 0

    SaleInput:
      type: object
      required:
        - productId
        - quantity
        - saleDate
        - salePrice
        - customerName
        - customerPhone
        - unitCost
      properties:
        productId:
          type: integer
          description: Ürün ID
        quantity:
          type: number
          description: Satış miktarı
          minimum: 0
        saleDate:
          type: string
          format: date-time
        salePrice:
          type: number
          minimum: 0
        customerName:
          type: string
        customerPhone:
          type: string
        note:
          type: string
        unitCost:
          type: number
          minimum: 0
        discount:
          type: number
          minimum: 0
        vat:
          type: number
          minimum: 0

    SaleResponse:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: number
        saleDate:
          type: string
          format: date-time
        salePrice:
          type: number
        discount:
          type: number
        vat:
          type: number
        netPrice:
          type: number
        vatAmount:
          type: number
        totalPrice:
          type: number
        customerName:
          type: string
        customerPhone:
          type: string
        note:
          type: string
        unitCost:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    StockMovement:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        productId:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        initialQuantity:
          type: number
          minimum: 0
        remainingQuantity:
          type: number
          minimum: 0
        unitCost:
          type: number
          minimum: 0
        movementDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    StockUsage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        saleId:
          type: integer
        stockMovementId:
          type: integer
        usedQuantity:
          type: number

    Recipe:
      type: object
      required:
        - name
        - recipeItems
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        outputQuantity:
          type: number
        suggestedPrice:
          type: number
        recipeItems:
          type: array
          items:
            $ref: '#/components/schemas/RecipeItem'

    RecipeSale:
      type: object
      required:
        - recipeId
        - quantity
        - saleDate
        - salePrice
      properties:
        recipeId:
          type: integer
        quantity:
          type: number
          minimum: 0
        saleDate:
          type: string
          format: date-time
        salePrice:
          type: number
          minimum: 0
        note:
          type: string
        discount:
          type: number
          minimum: 0
        vat:
          type: number
          minimum: 0

    RecipeItem:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
        quantity:
          type: number
        description:
          type: string

    Response:
      type: object
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/Sale'
            - $ref: '#/components/schemas/Recipe'
            - type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Sale'
                  - $ref: '#/components/schemas/Recipe'
        error:
          type: string

    Sale:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        recipeId:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        recipe:
          $ref: '#/components/schemas/Recipe'
        quantity:
          type: number
        saleDate:
          type: string
          format: date-time
        salePrice:
          type: number
        discount:
          type: number
        vat:
          type: number
        netPrice:
          type: number
        vatAmount:
          type: number
        totalPrice:
          type: number
        customerName:
          type: string
        customerPhone:
          type: string
        note:
          type: string
        unitCost:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time 